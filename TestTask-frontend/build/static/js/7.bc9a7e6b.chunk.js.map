{"version":3,"sources":["constants.js","assets/img/loader-example.gif","api/dashboardDataListApi.js","action/DashboardDataActions.js","api/dashboardCourseDataListApi.js","action/DashboardCourseDataActions.js","pages/DashboardPage.js"],"names":["__webpack_require__","d","__webpack_exports__","BASE_URL","module","exports","p","dashboardDataListApi","data","body","method","headers","Headers","Content-Type","Accept","fetch","then","response","status","localStorage","clear","window","location","href","json","catch","error","err","doDashboardDataRes","user","type","types","dashboardCourseDataListApi","doDashboardCourseDataRes","chartData","labels","datasets","backgroundColor","hoverBackgroundColor","courseData","DashboardPage","props","_this","Object","classCallCheck","this","console","log","possibleConstructorReturn","getPrototypeOf","call","state","isLoader","chartDataList","collegeArrayData","courseListData","courseArrayData","lightOptions","legend","fontColor","onClick","evt","item","_view","label","history","push","stateName","lightCourseOptions","DataDashboard","DataCourseDashboard","nextProps","_this2","DashboardDataListRes","setState","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","rgb","i","Math","floor","random","_id","count","join","e","f","DashboardCourseDataListRes","_step2","_iterator2","spinner","react_default","a","createElement","src","loaderImg","alt","className","react_loader_advanced_default","show","message","Row","Col","md","sm","xs","Card","CardHeader","chart","options","cutoutPercentage","React","Component","mapStateToProps","createStructuredSelector","withConnect","connect","dispatch","doDashboardData","res","doDashboardCourseData","compose"],"mappings":"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","file":"static/js/7.bc9a7e6b.chunk.js","sourcesContent":["export const BASE_URL = 'https://ed0a6b63384c.ngrok.io';","module.exports = __webpack_public_path__ + \"static/media/loader-example.3886920c.gif\";","import { BASE_URL } from '../constants';\r\n\r\nclass dashboardDataListApi {\r\n    static doDashboardData(data) {\r\n        try{\r\n            const ajaxRequestHeaders = new Headers({\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            });\r\n            let body = {\r\n                method: 'GET',\r\n                headers: ajaxRequestHeaders,\r\n            }\r\n            return fetch(BASE_URL + `/allData`, body).then(response => {\r\n                if(response.status === 401) {\r\n                    localStorage.clear()\r\n                    window.location.href ='/'\r\n                }\r\n                return response.json();\r\n            }).catch(error => {\r\n                return error;\r\n            });\r\n        }catch(err){\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default dashboardDataListApi;\r\n","import * as types from './actionTypes';\r\nimport dashboardDataListApi from '../api/dashboardDataListApi';\r\n\r\nexport function doDashboardData(data) {\r\n\r\n  return {\r\n    type: types.DO_DASHBOARDDATA,\r\n    data\r\n  };\r\n}\r\n\r\nexport function doDashboardDataRes(user) {  \r\n  return {\r\n    type: types.DO_DASHBOARDDATA_RES, \r\n    user\r\n  };\r\n}\r\n\r\nexport function DataDashboard(data) {\r\n  return function(dispatch) {\r\n    dashboardDataListApi.doDashboardData(data).then(res => {\r\n      dispatch(doDashboardDataRes(res));\r\n    }).catch(error => {\r\n      return error\r\n    });\r\n  };\r\n}\r\n","import { BASE_URL } from '../constants';\r\n\r\nclass dashboardCourseDataListApi {\r\n    static doDashboardCourseData(data) {\r\n        try{\r\n            const ajaxRequestHeaders = new Headers({\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            });\r\n            let body = {\r\n                method: 'GET',\r\n                headers: ajaxRequestHeaders,\r\n            }\r\n            return fetch(BASE_URL + `/getCourses`, body).then(response => {\r\n                if(response.status === 401) {\r\n                    localStorage.clear()\r\n                    window.location.href ='/'\r\n                }\r\n                return response.json();\r\n            }).catch(error => {\r\n                return error;\r\n            });\r\n        }catch(err){\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default dashboardCourseDataListApi;\r\n","import * as types from './actionTypes';\r\nimport dashboardCourseDataListApi from '../api/dashboardCourseDataListApi';\r\n\r\nexport function doDashboardCourseData(data) {\r\n\r\n  return {\r\n    type: types.DO_DASHBOARDCOURSEDATA,\r\n    data\r\n  };\r\n}\r\n\r\nexport function doDashboardCourseDataRes(user) {  \r\n  return {\r\n    type: types.DO_DASHBOARDCOURSEDATA_RES, \r\n    user\r\n  };\r\n}\r\n\r\nexport function DataCourseDashboard(data) {\r\n  return function(dispatch) {\r\n    dashboardCourseDataListApi.doDashboardCourseData(data).then(res => {\r\n      dispatch(doDashboardCourseDataRes(res));\r\n    }).catch(error => {\r\n      return error\r\n    });\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { Card,  CardHeader, Col, Row, } from 'reactstrap';\r\nimport { DataDashboard, doDashboardDataRes} from '../action/DashboardDataActions';\r\nimport { DataCourseDashboard, doDashboardCourseDataRes} from '../action/DashboardCourseDataActions';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport loaderImg from '../assets/img/loader-example.gif';\r\nimport Loader from 'react-loader-advanced';\r\nimport { Chart } from 'primereact/chart';\r\nconst chartData = {\r\n  labels: [],\r\n  datasets: [\r\n      {\r\n          data: [],\r\n          backgroundColor: [\r\n          ],\r\n          hoverBackgroundColor: [\r\n          ],\r\n          \r\n\r\n      }]\r\n};\r\n\r\nconst courseData = {\r\n  labels: [],\r\n  datasets: [\r\n      {\r\n          data: [],\r\n          backgroundColor: [],\r\n          hoverBackgroundColor: []\r\n      }]\r\n};\r\n\r\nclass DashboardPage extends React.Component {\r\n  constructor(props){\r\n    console.log('cons', props)\r\n    super(props);\r\n    this.state ={      \r\n      isLoader: false,\r\n      chartDataList: [],\r\n      collegeArrayData: {},\r\n      courseListData: [],\r\n      courseArrayData:{}\r\n    }\r\n    \r\n    this.lightOptions = {\r\n      legend: {\r\n          labels: {            \r\n            fontColor: '#495057',           \r\n          }\r\n      },\r\n      'onClick' : function (evt, item) {\r\n        console.log ('legend onClick', evt);\r\n        console.log('legd item', item[0]._view.label);\r\n        console.log(props)\r\n        props.history.push('/state-college', {\r\n          stateName: item[0]._view.label\r\n        })\r\n      }\r\n    };\r\n\r\n    \r\n    this.lightCourseOptions = {\r\n      legend: {\r\n          labels: {\r\n              fontColor: '#495057'\r\n          }\r\n      }\r\n    };\r\n  }\r\n\r\n  \r\n  componentDidMount() {\r\n    // this is needed, because InfiniteCalendar forces window scroll\r\n    // window.scrollTo(0, 0);\r\n    const data = {      \r\n    };\r\n    this.props.DataDashboard(data);\r\n    this.props.DataCourseDashboard(data);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    // console.log('nextD', nextProps)\r\n    chartData.labels = [];\r\n    chartData.datasets[0].data = [];\r\n    chartData.datasets[0].backgroundColor = [];\r\n    chartData.datasets[0].hoverBackgroundColor = [];\r\n\r\n    courseData.labels = [];\r\n    courseData.datasets[0].data = [];\r\n    courseData.datasets[0].backgroundColor = [];\r\n    courseData.datasets[0].hoverBackgroundColor =[];\r\n\r\n    if(nextProps.doDashboardDataRes && nextProps.doDashboardDataRes.user){\r\n      if(nextProps.doDashboardDataRes.user && nextProps.doDashboardDataRes.user.DashboardDataListRes){\r\n        if(nextProps.doDashboardDataRes.user.DashboardDataListRes && nextProps.doDashboardDataRes.user.DashboardDataListRes.status === \"success\"){          \r\n          this.setState({\r\n            chartDataList: nextProps.doDashboardDataRes.user.DashboardDataListRes.data\r\n          },()=>{\r\n            \r\n            for(let item of this.state.chartDataList){\r\n              let rgb = []\r\n              for(var i = 0; i < 3; i++)\r\n              rgb.push(Math.floor(Math.random() * 255));\r\n              chartData.labels.push(item._id)\r\n              chartData.datasets[0].data.push(item.count)\r\n              chartData.datasets[0].backgroundColor.push('rgb('+ rgb.join(',') +')')\r\n              chartData.datasets[0].hoverBackgroundColor.push('rgba('+ rgb.join(',') +',.7)')\r\n              this.setState({\r\n                collegeArrayData : chartData\r\n              },()=>{\r\n                // console.log('arr', this.state.collegeArrayData)\r\n              })\r\n            }\r\n          })          \r\n        }\r\n      }\r\n    }\r\n\r\n    if(nextProps.doDashboardCourseDataRes && nextProps.doDashboardCourseDataRes.user){\r\n      if(nextProps.doDashboardCourseDataRes.user && nextProps.doDashboardCourseDataRes.user.DashboardCourseDataListRes){\r\n        if(nextProps.doDashboardCourseDataRes.user.DashboardCourseDataListRes && nextProps.doDashboardCourseDataRes.user.DashboardCourseDataListRes.status === \"success\"){\r\n          this.setState({\r\n            courseListData: nextProps.doDashboardCourseDataRes.user.DashboardCourseDataListRes.data\r\n          },()=>{\r\n            for(let item of this.state.courseListData){\r\n              let rgb = []\r\n              for(var i = 0; i < 3; i++)\r\n              rgb.push(Math.floor(Math.random() * 255));\r\n              courseData.labels.push(item._id)\r\n              courseData.datasets[0].data.push(item.count)\r\n              courseData.datasets[0].backgroundColor.push('rgb('+ rgb.join(',') +')')\r\n              courseData.datasets[0].hoverBackgroundColor.push('rgba('+ rgb.join(',') +',.7)')\r\n              this.setState({\r\n                courseArrayData: courseData\r\n              })\r\n            }            \r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    const spinner = <span><img src={loaderImg} alt=\"\" /></span>;\r\n    \r\n\r\n    \r\n\r\n    return (\r\n      <div className=\"cr-page px-3 pd_bottom\"> \r\n        <Loader show={this.state.isLoader} message={spinner}>\r\n          <div className=\"col-xs-12 col-sm-12 float-left \">\r\n            <h5>Dashboard</h5>\r\n          </div>  \r\n\r\n          <Row>            \r\n            <Col md=\"12\" sm=\"12\" xs=\"12\">\r\n              <Card className=\"bdr_box\">\r\n                <CardHeader>State Colleges</CardHeader>                \r\n                  <Chart type=\"doughnut\" data={this.state.collegeArrayData} options={this.lightOptions} />\r\n              </Card>     \r\n            </Col>\r\n            \r\n          </Row>\r\n          <Row>\r\n          <Col md=\"12\" sm=\"12\" xs=\"12\">\r\n              <Card className=\"bdr_box\">\r\n                <CardHeader>Courses</CardHeader>                \r\n                  <Chart type=\"doughnut\" cutoutPercentage data={this.state.courseArrayData} options={this.lightCourseOptions } />\r\n              </Card>     \r\n            </Col>\r\n          </Row>\r\n        </Loader>   \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDashboardPage.propTypes = {\r\n  doDashboardDataRes: PropTypes.any, \r\n  doDashboardCourseDataRes: PropTypes.any,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  doDashboardDataRes: doDashboardDataRes,\r\n  doDashboardCourseDataRes: doDashboardCourseDataRes  \r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    DataDashboard: (data) => dispatch(DataDashboard(data)),\r\n    DataCourseDashboard: (data) => dispatch(DataCourseDashboard(data))\r\n  };\r\n}\r\n\r\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\r\nexport default compose(withConnect)(DashboardPage);\r\n"],"sourceRoot":""}