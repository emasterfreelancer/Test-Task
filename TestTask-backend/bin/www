#!/usr/bin/env node

/**
 * Module dependencies.
 */
const fs = require('fs');
const app = require('../app');
const debug = require('debug')('charms');
const http = require('http');
//const https = require('https');
const { config } = require('../src/app/config');

/**
 * Get port from environment and store in Express.
 */
/**enabling https on server */
//const credentials = {
//  key: fs.readFileSync('/home/gitlab-runner/SSL_Free_24Jan2019/meanstack_stagingsdei_com.key'),
//  cert: fs.readFileSync('/home/gitlab-runner/SSL_Free_24Jan2019/meanstack_stagingsdei_com.crt')
//};

var port = normalizePort(config.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
*/
var server = http.createServer(app);
//var server = https.createServer(credentials, app);

/**
 * Socket Server.
*/
/* const io = require('socket.io').listen(server);
require('../src/app/helpers/socket')(io); */

/**
 * Listen on provided port, on all network interfaces.
*/
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
   	// named pipe
   	return val;
  	}
	if (port >= 0) {
   	// port number
   	return port;
  	}
	return false;
}

/**
 * Event listener for HTTP server "error" event.
*/

function onError(error) {
	if (error.syscall !== 'listen') {
   	throw error;
  	}
	var bind = typeof port === 'string'
   	? 'Pipe ' + port
   	: 'Port ' + port;
	// handle specific listen errors with friendly messages
	switch (error.code) {
   	case 'EACCES':
   		console.error(bind + ' requires elevated privileges');
   		process.exit(1);
      	break;
    	case 'EADDRINUSE':
      	console.error(bind + ' is already in use');
      	process.exit(1);
      	break;
    	default:
      	throw error;
  	}
}

/**
	* Event listener for HTTP server "listening" event.
*/

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
   	? 'pipe ' + addr
   	: 'port ' + addr.port;
  	debug('Listening on ' + bind);
  	console.log('Listening on ' + bind);
}